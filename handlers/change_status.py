import datetime
import os
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from utils.models import Users, Races
from utils.keyboards import write_btn, back_btn, next_btn, cancel_or_continue, send_location
from utils.states import ChangeStatus
from handlers.start import start_handler

change_status_router = Router()


@change_status_router.callback_query(F.data == 'change_status')
async def change_status_handler(callback: CallbackQuery, state: FSMContext):
    user: Users = Users.get_or_none(Users.user_id == callback.from_user.id)
    await state.clear()
    notify_msg = None

    if not user.status:
        user.status = 1
        user.points_done = 0
        user.points = 0
        text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –≤—ã—à–µ–ª –Ω–∞ —Å–º–µ–Ω—É'
        notify_msg = await callback.bot.send_message(os.getenv('CHANNEL_ID'), text,
                                                     reply_markup=write_btn(user.user_id),
                                                     parse_mode="HTML")
        user.notify_msg_id = notify_msg.message_id
        await callback.message.edit_text(f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í –ø—É—Ç–∏ –Ω–∞ –†–¶¬ª</i>',
                                         reply_markup=next_btn('start'), parse_mode="HTML")
    elif user.status == 1:
        await callback.message.delete()
        await callback.message.answer(
            '‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –†–¶',
            reply_markup=send_location())
        await state.set_state(ChangeStatus.send_location_start)
    elif user.status == 2:
        text = '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∑–∫–∏'
        await state.set_state(ChangeStatus.input_points)
        await state.update_data(past_msg_id=callback.message.message_id)
        await callback.message.edit_text(text, reply_markup=back_btn('start'))

    if user.status == 3:
        user.status = 4
        user.points_done += 1
        text = (f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ '
                f'<i>{user.points_done}</i> —Ç–æ—á–∫–µ, –µ—â—ë <i>{user.points - user.points_done}</i> —Ç–æ—á–µ–∫')
        notify_msg = await callback.bot.send_message(os.getenv('CHANNEL_ID'), text,
                                                     reply_markup=write_btn(user.user_id),
                                                     parse_mode="HTML")
        await callback.message.edit_text(f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í—ã–≥—Ä—É–∂–∞—é—Å—å¬ª</i>\nüìç –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞: '
                                         f'<i>{user.points_done}</i>, –æ—Å—Ç–∞–ª–æ—Å—å <i>{user.points - user.points_done}</i>'
                                         f' —Ç–æ—á–µ–∫',
                                         reply_markup=next_btn('start'), parse_mode="HTML")

    elif user.status == 4:
        if user.points_done >= user.points:
            text = '''‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–π—Å!
            
1Ô∏è‚É£ –ï–¥—É –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ä–µ–π—Å
2Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∞–π —Å–º–µ–Ω—É, –µ—Å–ª–∏ –Ω–µ –µ–¥–µ—à—å –Ω–∞ –†–¶'''
            await callback.message.edit_text(text, reply_markup=cancel_or_continue())
        else:
            user.status = 3
            text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç'
            notify_msg = await callback.bot.send_message(os.getenv('CHANNEL_ID'), text,
                                                         reply_markup=write_btn(user.user_id),
                                                         parse_mode="HTML")
            await callback.message.edit_text(f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í —Ä–µ–π—Å–µ¬ª</i>, –µ–∑–∂–∞–π—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é'
                                             f' —Ç–æ—á–∫—É', reply_markup=next_btn('start'), parse_mode="HTML")
        race = Races.select().where(Races.user_id == int(callback.from_user.id)).order_by(-Races.id)[0]
        points_time = race.points_time.split(';') if race.points_time != '' else []
        points_time.append(str(datetime.datetime.now()))
        race.points_time = ';'.join(points_time)
        race.save()
    if notify_msg is not None:
        user.notify_msg_id = notify_msg.message_id
    user.save()


@change_status_router.message(ChangeStatus.input_points)
async def input_points_handler(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    if not message.text.isdigit():
        return await message.bot.edit_message_text('‚ùå –û—à–∏–±–∫–∞! –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n'
                                                   '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∑–∫–∏',
                                                   reply_markup=next_btn('start'), chat_id=message.chat.id,
                                                   message_id=data['past_msg_id'], parse_mode="HTML")
    elif int(message.text) > 15:
        return await message.bot.edit_message_text('‚ùå –û—à–∏–±–∫–∞! –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º 15 —Ç–æ—á–µ–∫\n'
                                                   '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∑–∫–∏',
                                                   reply_markup=next_btn('start'), chat_id=message.chat.id,
                                                   message_id=data['past_msg_id'], parse_mode="HTML")

    user: Users = Users.get_or_none(Users.user_id == message.from_user.id)
    user.status = 3
    user.points = int(message.text)
    text = (f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í —Ä–µ–π—Å–µ¬ª</i>\n'
            f'üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∑–∫–∏: <i>{message.text} —Ç–æ—á–µ–∫</i>\n\n'
            f'üëç –ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π –¥–æ—Ä–æ–≥–∏\n'
            f'‚ÑπÔ∏è –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–π—Å–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!')

    notify_text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –Ω–∞ <i>{message.text}</i> —Ç–æ—á–µ–∫'
    await state.clear()

    notify_msg = await message.bot.send_message(os.getenv('CHANNEL_ID'), notify_text,
                                                reply_markup=write_btn(user.user_id),
                                                parse_mode="HTML")
    user.notify_msg_id = notify_msg.message_id
    user.save()
    await message.bot.edit_message_text(text,
                                        reply_markup=next_btn('start'), chat_id=message.chat.id,
                                        message_id=data['past_msg_id'], parse_mode="HTML")
    race = Races.create(user_id=message.from_user.id,
                        datetime_start=datetime.datetime.now(),
                        points=int(message.text),
                        fullname=user.fullname,
                        number_car=user.number_car)


@change_status_router.message(ChangeStatus.input_time_to_base)
async def input_time_to_base_handler(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()

    user: Users = Users.get_or_none(Users.user_id == message.from_user.id)
    user.status = 1
    user.points = 0
    user.points_done = 0
    await state.clear()
    text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –±—É–¥–µ—Ç –Ω–∞ –†–¶ —á–µ—Ä–µ–∑ <i>{message.text}</i>'

    notify_msg = await message.bot.send_message(os.getenv('CHANNEL_ID'), text, reply_markup=write_btn(user.user_id),
                                                parse_mode="HTML")
    user.notify_msg_id = notify_msg.message_id
    user.save()
    await message.bot.edit_message_text(
        f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í –ø—É—Ç–∏ –Ω–∞ –†–¶¬ª</i>, –±—É–¥–µ—Ç–µ —á–µ—Ä–µ–∑ <i>{message.text} –º–∏–Ω—É—Ç</i>',
        reply_markup=next_btn('start'), chat_id=message.chat.id, message_id=data['past_msg_id'], parse_mode="HTML")


@change_status_router.message(ChangeStatus.send_location_start, F.location)
async def handle_location(message: Message, state: FSMContext):
    center = (55.695708, 37.428913)
    check = ((message.location.latitude - center[0]) ** 2 + (message.location.longitude - center[1]) ** 2) < 0.003 ** 2
    if check:
        user: Users = Users.get_or_none(Users.user_id == message.from_user.id)
        user.status = 2
        text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –∂–¥—ë—Ç –ø–æ–≥—Ä—É–∑–∫–∏'
        notify_msg = await message.bot.send_message(os.getenv('CHANNEL_ID'), text,
                                                    reply_markup=write_btn(user.user_id),
                                                    parse_mode="HTML")
        await message.answer('‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–ù–∞—Ö–æ–∂—É—Å—å –Ω–∞ –†–¶¬ª</i>',
                             reply_markup=next_btn('start'), parse_mode="HTML")
        user.notify_msg_id = notify_msg.message_id
        user.save()
    else:
        await state.clear()
        await message.answer('‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–µ –Ω–∞ –†–¶, —Å–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–≥–¥–∞ –ø—Ä–∏–µ–¥–µ—Ç–µ –Ω–∞ –†–¶',
                             reply_markup=next_btn('start'))


@change_status_router.message(F.text, ChangeStatus.send_location_cancel)
async def handle_message(message: Message, state: FSMContext):
    if message.text != '–ù–∞–∑–∞–¥':
        await message.answer('–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥')
    else:
        await start_handler(message, state)


@change_status_router.callback_query(F.data == 'continue_race')
async def continue_race(callback: CallbackQuery, state: FSMContext):
    text = '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä—É –¥–æ –†–¶, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–º–µ–Ω—É'
    await state.set_state(ChangeStatus.input_time_to_base)
    await state.update_data(past_msg_id=callback.message.message_id)
    await callback.message.edit_text(text, reply_markup=back_btn('change_status'))
