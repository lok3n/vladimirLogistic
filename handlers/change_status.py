import os
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from utils.models import Users
from utils.keyboards import write_btn, back_btn, next_btn
from utils.states import ChangeStatus

change_status_router = Router()


@change_status_router.callback_query(F.data == 'change_status')
async def change_status_handler(callback: CallbackQuery, state: FSMContext):
    user: Users = Users.get_or_none(Users.user_id == callback.from_user.id)
    await state.clear()

    if user.status == 0:
        user.status = 1
        user.save()
        text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –∂–¥—ë—Ç –ø–æ–≥—Ä—É–∑–∫–∏'
        await callback.bot.send_message(os.getenv('CHANNEL_ID'), text, reply_markup=write_btn(user.user_id),
                                        parse_mode="HTML")
        await callback.message.edit_text('‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–ù–∞—Ö–æ–∂—É—Å—å –Ω–∞ –†–¶¬ª</i>',
                                         reply_markup=next_btn('start'), parse_mode="HTML")

    elif user.status == 1:
        text = '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∑–∫–∏'
        await state.set_state(ChangeStatus.input_points)
        await state.update_data(past_msg_id=callback.message.message_id)
        await callback.message.edit_text(text, reply_markup=back_btn('start'))

    if user.status == 2:
        user.status = 3
        user.points_done += 1
        user.save()
        text = (f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ '
                f'<i>{user.points_done}</i> —Ç–æ—á–∫–µ, –µ—â—ë <i>{user.points - user.points_done}</i> —Ç–æ—á–µ–∫')
        await callback.bot.send_message(os.getenv('CHANNEL_ID'), text, reply_markup=write_btn(user.user_id),
                                        parse_mode="HTML")
        await callback.message.edit_text(f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í—ã–≥—Ä—É–∂–∞—é—Å—å¬ª</i>\nüìç –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞: '
                                         f'<i>{user.points_done}</i>, –æ—Å—Ç–∞–ª–æ—Å—å <i>{user.points - user.points_done}</i>'
                                         f' —Ç–æ—á–µ–∫',
                                         reply_markup=next_btn('start'), parse_mode="HTML")

    elif user.status == 3:
        if user.points_done >= user.points:
            text = '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä—É –¥–æ –†–¶'
            await state.set_state(ChangeStatus.input_time_to_base)
            await state.update_data(past_msg_id=callback.message.message_id)
            await callback.message.edit_text(text, reply_markup=back_btn('start'))
        else:
            user.status = 2
            user.save()
            text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç'
            await callback.bot.send_message(os.getenv('CHANNEL_ID'), text, reply_markup=write_btn(user.user_id),
                                            parse_mode="HTML")
            await callback.message.edit_text(f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í —Ä–µ–π—Å–µ¬ª</i>, –µ–∑–∂–∞–π—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é'
                                             f' —Ç–æ—á–∫—É', reply_markup=next_btn('start'), parse_mode="HTML")


@change_status_router.message(ChangeStatus.input_points)
async def input_points_handler(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    if not message.text.isdigit():
        return await message.bot.edit_message_text('‚ùå –û—à–∏–±–∫–∞! –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n'
                                                   '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∑–∫–∏',
                                                   reply_markup=next_btn('start'), chat_id=message.chat.id,
                                                   message_id=data['past_msg_id'], parse_mode="HTML")

    user: Users = Users.get_or_none(Users.user_id == message.from_user.id)
    user.status = 2
    user.points = int(message.text)
    user.save()
    text = (f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í —Ä–µ–π—Å–µ¬ª</i>\n'
            f'üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∑–∫–∏: <i>{message.text} —Ç–æ—á–µ–∫</i>\n\n'
            f'üëç –ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π –¥–æ—Ä–æ–≥–∏\n'
            f'‚ÑπÔ∏è –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–π—Å–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!')

    notify_text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –Ω–∞ <i>{message.text}</i> —Ç–æ—á–µ–∫'
    await state.clear()

    await message.bot.send_message(os.getenv('CHANNEL_ID'), notify_text, reply_markup=write_btn(user.user_id),
                                   parse_mode="HTML")
    await message.bot.edit_message_text(text,
                                        reply_markup=next_btn('start'), chat_id=message.chat.id,
                                        message_id=data['past_msg_id'], parse_mode="HTML")


@change_status_router.message(ChangeStatus.input_time_to_base)
async def input_time_to_base_handler(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()

    user: Users = Users.get_or_none(Users.user_id == message.from_user.id)
    user.status = 0
    user.points = 0
    user.points_done = 0
    user.save()
    await state.clear()
    text = f'–í–æ–¥–∏—Ç–µ–ª—å <i>{user.fullname}</i> —Å –Ω–æ–º–µ—Ä–æ–º –¢–° <i>{user.number_car}</i> –±—É–¥–µ—Ç –Ω–∞ –†–¶ —á–µ—Ä–µ–∑ <i>{message.text}</i>'

    await message.bot.send_message(os.getenv('CHANNEL_ID'), text, reply_markup=write_btn(user.user_id),
                                   parse_mode="HTML")
    await message.bot.edit_message_text(
        f'‚úÖ –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ <i>¬´–í –ø—É—Ç–∏ –Ω–∞ –†–¶¬ª</i>, –±—É–¥–µ—Ç–µ —á–µ—Ä–µ–∑ <i>{message.text} –º–∏–Ω—É—Ç</i>',
        reply_markup=next_btn('start'), chat_id=message.chat.id, message_id=data['past_msg_id'], parse_mode="HTML")
